name: 🚀 Build Go Binary

on:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

# Add packages permission for GHCR
permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.24]
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: 📋 Verify Go Installation
      run: |
        go version
        go env GOVERSION
        go env GOOS
        go env GOARCH
        
    - name: 📦 Cache Go Modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: 📚 Download Dependencies
      run: |
        go mod download
        go mod verify
        
    - name: 🔍 Run Go Vet
      run: go vet ./...
      
    - name: 🧪 Run Tests
      run: |
        go test -v ./...
        go test -race -coverprofile=coverage.out ./...
        
    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: 🔨 Build Binary
      run: |
        echo "Building TempFiles binary..."
        go build -v -ldflags="-s -w" -o bin/tempfile ./cmd/server
        
    - name: ✅ Verify Binary
      run: |
        ls -la bin/
        file bin/tempfile
        echo "Binary created successfully"
        
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tempfile-binary-linux-amd64
        path: bin/tempfile
        retention-days: 30

  build-multiplatform:
    name: Build Multi-Platform
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
            
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24
        
    - name: 📦 Cache Go Modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        
    - name: 📚 Download Dependencies
      run: go mod download
      
    - name: 🔨 Build for ${{ matrix.goos }}/${{ matrix.goarch }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        echo "Building for $GOOS/$GOARCH..."
        go build -v -ldflags="-s -w -X main.version=${GITHUB_SHA:0:7}" \
          -o dist/tempfile-${{ matrix.suffix }} ./cmd/server
          
    - name: 📤 Upload Multi-Platform Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tempfile-${{ matrix.suffix }}
        path: dist/tempfile-${{ matrix.suffix }}
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24
        
    - name: 🔒 Install Gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
        
    - name: 🔒 Run Gosec Security Scanner
      run: gosec -fmt json -out gosec-report.json -stdout -verbose=text ./...
      continue-on-error: true
      
    - name: 📤 Upload Gosec Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gosec-security-report-build
        path: gosec-report.json
        retention-days: 30
        
    - name: 🛡️ Check Dependencies for Known Vulnerabilities
      run: |
        echo "Checking dependencies for known vulnerabilities..."
        go list -m all
        echo "✅ Dependency check completed"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24
        
    - name: 🧹 Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  # NEW: Enhanced Docker Build and Push to GHCR
  build-docker:
    name: Docker Build & Push to GHCR
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract Metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=dev,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Tempfile
          org.opencontainers.image.description=A secure file sharing service (development build)
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
      
    - name: 🔨 Build and Push Docker Image to GHCR
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_VERSION=${{ github.sha }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
        
    - name: 🧪 Test Docker Image
      run: |
        echo "🧪 Testing Docker image..."
        
        # Get the image name from metadata
        IMAGE_NAME=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_NAME"
        
        # Test the image
        echo "Starting container..."
        docker run --rm -d -p 3000:3000 --name tempfile-test $IMAGE_NAME
        
        # Wait for container to start
        sleep 15
        
        # Test health endpoint
        echo "Testing health endpoint..."
        for i in {1..5}; do
          if curl -f http://localhost:3000/health; then
            echo "✅ Health check passed"
            break
          else
            echo "⏳ Attempt $i failed, retrying..."
            sleep 5
          fi
        done
        
        # Show container logs
        echo "Container logs:"
        docker logs tempfile-test
        
        # Cleanup
        echo "Stopping container..."
        docker stop tempfile-test
        
        echo "✅ Docker test completed successfully"

    - name: 📋 Docker Build Summary
      run: |
        echo "## 🐳 Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: GitHub Container Registry (ghcr.io)" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏷️ Available Tags" >> $GITHUB_STEP_SUMMARY
        
        # Display all tags
        echo '${{ steps.meta.outputs.tags }}' | while IFS= read -r tag; do
          if [ -n "$tag" ]; then
            echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Test" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull and test the image" >> $GITHUB_STEP_SUMMARY
        IMAGE_NAME=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "docker pull $IMAGE_NAME" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d -p 3000:3000 $IMAGE_NAME" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  release-info:
    name: Release Information
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, build-multiplatform, security-scan, lint, build-docker]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📋 Generate Build Summary
      run: |
        echo "## 🎉 Build Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${GITHUB_REF#refs/heads/}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Go Version**: \`1.24\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Available Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Linux AMD64" >> $GITHUB_STEP_SUMMARY
        echo "- Linux ARM64" >> $GITHUB_STEP_SUMMARY
        echo "- macOS AMD64" >> $GITHUB_STEP_SUMMARY
        echo "- macOS ARM64 (Apple Silicon)" >> $GITHUB_STEP_SUMMARY
        echo "- Windows AMD64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Quality Checks" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Code Linting: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Build: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Push to GHCR: Passed" >> $GITHUB_STEP_SUMMARY
