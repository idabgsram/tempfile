name: 🚀 Release & Semantic Versioning

on:
  push:
    branches: [ main ]

# Add permissions for GitHub token
permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  # Job untuk build dan release (simplified)
  release:
    name: Build & Release
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Use PAT if available, otherwise GITHUB_TOKEN
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        
    - name: 🔍 Check if Release Needed
      id: check
      run: |
        # Check if last commit contains [skip-release] or [no-release]
        if git log -1 --pretty=%B | grep -E '\[(skip-release|no-release)\]'; then
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "Release skipped due to commit message flag"
        else
          echo "should-release=true" >> $GITHUB_OUTPUT
        fi
        
    - name: 🐹 Setup Go
      if: steps.check.outputs.should-release == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: 1.24
        
    - name: 📦 Cache Go Modules
      if: steps.check.outputs.should-release == 'true'
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-
          
    - name: 📚 Download Dependencies
      if: steps.check.outputs.should-release == 'true'
      run: |
        go mod download
        go mod verify
        
    - name: 🧪 Run Tests
      if: steps.check.outputs.should-release == 'true'
      run: |
        go test -v ./...
        go test -race -coverprofile=coverage.out ./...
        
    - name: 🔨 Build Multi-Platform Binaries
      if: steps.check.outputs.should-release == 'true'
      run: |
        # Create release directory
        mkdir -p release
        
        # Get basic info for build
        COMMIT_SHA=${GITHUB_SHA:0:7}
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')
        
        # Build flags (version will be set by semantic-release)
        LDFLAGS="-s -w -X main.commit=${COMMIT_SHA} -X main.buildTime=${BUILD_TIME}"
        
        # Build for different platforms
        echo "🔨 Building for Linux AMD64..."
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="${LDFLAGS}" -o release/tempfile-linux-amd64 ./cmd/server
        
        echo "🔨 Building for Linux ARM64..."
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="${LDFLAGS}" -o release/tempfile-linux-arm64 ./cmd/server
        
        echo "🔨 Building for macOS AMD64..."
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="${LDFLAGS}" -o release/tempfile-darwin-amd64 ./cmd/server
        
        echo "🔨 Building for macOS ARM64..."
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="${LDFLAGS}" -o release/tempfile-darwin-arm64 ./cmd/server
        
        echo "🔨 Building for Windows AMD64..."
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="${LDFLAGS}" -o release/tempfile-windows-amd64.exe ./cmd/server
        
    - name: 📦 Create Release Archives
      if: steps.check.outputs.should-release == 'true'
      run: |
        cd release
        
        # Create compressed archives
        echo "📦 Creating archives..."
        
        # Linux AMD64
        tar -czf tempfile-linux-amd64.tar.gz tempfile-linux-amd64
        
        # Linux ARM64
        tar -czf tempfile-linux-arm64.tar.gz tempfile-linux-arm64
        
        # macOS AMD64
        tar -czf tempfile-darwin-amd64.tar.gz tempfile-darwin-amd64
        
        # macOS ARM64
        tar -czf tempfile-darwin-arm64.tar.gz tempfile-darwin-arm64
        
        # Windows AMD64
        zip tempfile-windows-amd64.zip tempfile-windows-amd64.exe
        
        # Generate checksums
        echo "🔐 Generating checksums..."
        sha256sum *.tar.gz *.zip > checksums.txt
        
        # List files
        ls -la
        
    - name: 🐳 Build Docker Image
      if: steps.check.outputs.should-release == 'true'
      run: |
        # Build Docker image
        docker build -t tempfile:latest .
        
        # Save Docker image as tar for release
        docker save tempfile:latest | gzip > release/tempfile-docker.tar.gz
        
    - name: 🏷️ Create Semantic Release
      if: steps.check.outputs.should-release == 'true'
      id: semantic_release
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: github-actions[bot]
        GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions[bot]
        GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
      with:
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
          conventional-changelog-conventionalcommits
        
    - name: 📤 Upload Release Assets
      if: steps.check.outputs.should-release == 'true' && steps.semantic_release.outputs.new_release_published == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.semantic_release.outputs.new_release_version }}
        name: Release v${{ steps.semantic_release.outputs.new_release_version }}
        body: ${{ steps.semantic_release.outputs.new_release_notes }}
        files: |
          release/tempfile-linux-amd64.tar.gz
          release/tempfile-linux-arm64.tar.gz
          release/tempfile-darwin-amd64.tar.gz
          release/tempfile-darwin-arm64.tar.gz
          release/tempfile-windows-amd64.zip
          release/tempfile-docker.tar.gz
          release/checksums.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        
    - name: 📋 Release Summary
      if: steps.check.outputs.should-release == 'true' && steps.semantic_release.outputs.new_release_published == 'true'
      run: |
        VERSION=${{ steps.semantic_release.outputs.new_release_version }}
        
        echo "## 🎉 New Release Published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Release Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`v${VERSION}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Available Downloads" >> $GITHUB_STEP_SUMMARY
        echo "- [Linux AMD64](https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tempfile-linux-amd64.tar.gz)" >> $GITHUB_STEP_SUMMARY
        echo "- [Linux ARM64](https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tempfile-linux-arm64.tar.gz)" >> $GITHUB_STEP_SUMMARY
        echo "- [macOS AMD64](https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tempfile-darwin-amd64.tar.gz)" >> $GITHUB_STEP_SUMMARY
        echo "- [macOS ARM64](https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tempfile-darwin-arm64.tar.gz)" >> $GITHUB_STEP_SUMMARY
        echo "- [Windows AMD64](https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tempfile-windows-amd64.zip)" >> $GITHUB_STEP_SUMMARY
        echo "- [Docker Image](https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tempfile-docker.tar.gz)" >> $GITHUB_STEP_SUMMARY
        echo "- [Checksums](https://github.com/${{ github.repository }}/releases/download/v${VERSION}/checksums.txt)" >> $GITHUB_STEP_SUMMARY

    - name: 🚫 No Release Needed
      if: steps.check.outputs.should-release == 'false'
      run: |
        echo "## ⏭️ Release Skipped" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Release was skipped due to commit message flag [skip-release] or [no-release]" >> $GITHUB_STEP_SUMMARY
