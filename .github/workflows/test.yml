name: 🧪 Test & Validate

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ feature/*, hotfix/* ]

jobs:
  # Quick validation for PR
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        
    - name: 📚 Download Dependencies
      run: go mod download
      
    - name: 🔍 Verify Go Modules
      run: go mod verify
      
    - name: 🧹 Check Formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not properly formatted:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: 🔍 Run Go Vet
      run: go vet ./...
      
    - name: 🧪 Run Tests
      run: go test -v ./...
      
    - name: 🔨 Build Check
      run: go build -v ./cmd/server

  # Test commit message format (for PRs to main)
  commit-format:
    name: Check Commit Format
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 Validate Commit Messages
      run: |
        echo "Checking commit message format for conventional commits..."
        
        # Get commits in this PR
        COMMITS=$(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        
        # Check each commit message
        for commit in $COMMITS; do
          MESSAGE=$(git log --format=%B -n 1 $commit)
          echo "Checking commit: $commit"
          echo "Message: $MESSAGE"
          
          # Check if commit follows conventional commits format
          if ! echo "$MESSAGE" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{1,50}'; then
            echo "❌ Commit $commit does not follow conventional commits format"
            echo "Expected format: type(scope): description"
            echo "Examples:"
            echo "  feat: add new upload feature"
            echo "  fix(api): resolve file upload issue"
            echo "  docs: update README"
            exit 1
          else
            echo "✅ Commit $commit follows conventional commits format"
          fi
        done
        
        echo "✅ All commits follow conventional commits format!"

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24
        
    - name: 🔒 Run Gosec Security Scanner
      uses: securecodewarrior/gosec-action@v2
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
        
    - name: 📤 Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec.sarif
        
  # Docker build test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔨 Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: tempfile:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [validate, security, docker]
    if: always()
    
    steps:
    - name: 📋 Generate Test Summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.validate.result }}" = "success" ]; then
          echo "✅ **Validation**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Validation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security.result }}" = "success" ]; then
          echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security Scan**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.docker.result }}" = "success" ]; then
          echo "✅ **Docker Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Additional Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Go Version**: 1.24" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "- **PR**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Branch**: ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
        fi
